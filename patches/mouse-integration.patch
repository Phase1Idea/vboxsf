
project frameworks/native/
diff --git a/frameworks/native/services/inputflinger/InputReader.cpp b/frameworks/native/services/inputflinger/InputReader.cpp
index cbd1639..9c45772 100644
--- a/frameworks/native/services/inputflinger/InputReader.cpp
+++ b/frameworks/native/services/inputflinger/InputReader.cpp
@@ -257,7 +257,9 @@ void TouchAffineTransformation::applyTo(float& x, float& y) const {
 InputReader::InputReader(const sp<EventHubInterface>& eventHub,
         const sp<InputReaderPolicyInterface>& policy,
         const sp<InputListenerInterface>& listener) :
-        mContext(this), mEventHub(eventHub), mPolicy(policy),
+		mContext(this),		
+		mEvRedirToID(NO_EV_REDIR_DEVICEID), mEvRedirFromID(NO_EV_REDIR_DEVICEID),
+        mEventHub(eventHub), mPolicy(policy),
         mGlobalMetaState(0), mGeneration(1),
         mDisableVirtualKeysTimeout(LLONG_MIN), mNextTimeout(LLONG_MAX),
         mConfigurationChangesToRefresh(0) {
@@ -418,6 +420,11 @@ void InputReader::removeDeviceLocked(nsecs_t when, int32_t deviceId) {
         return;
     }
 
+	if(mEvRedirToID == deviceId)
+		mEvRedirToID = NO_EV_REDIR_DEVICEID;
+	if(mEvRedirFromID == deviceId)
+		mEvRedirFromID = NO_EV_REDIR_DEVICEID;
+
     device = mDevices.valueAt(deviceIndex);
     mDevices.removeItemsAt(deviceIndex, 1);
     bumpGenerationLocked();
@@ -468,6 +475,17 @@ InputDevice* InputReader::createDeviceLocked(int32_t deviceId, int32_t controlle
         device->addMapper(new VibratorInputMapper(device));
     }
 
+	// See if this is a VirtualBox integration device, we need cursor
+	if (identifier.vendor == 0x80ee && identifier.product == 0xcafe) {
+//        classes &= ~(INPUT_DEVICE_CLASS_TOUCH | INPUT_DEVICE_CLASS_CURSOR);
+        classes &= ~INPUT_DEVICE_CLASS_CURSOR;
+		mEvRedirToID = deviceId;
+        device->addMapper(new CursorInputMapper(device, true));
+    } else if (identifier.vendor == 2 && identifier.product == 6) {
+		ALOGV(" ---- redirect from %d %s", deviceId, identifier.name.string());
+		mEvRedirFromID = deviceId;
+	}
+
     // Keyboard-like devices.
     uint32_t keyboardSource = 0;
     int32_t keyboardType = AINPUT_KEYBOARD_TYPE_NON_ALPHABETIC;
@@ -515,6 +533,11 @@ InputDevice* InputReader::createDeviceLocked(int32_t deviceId, int32_t controlle
 
 void InputReader::processEventsForDeviceLocked(int32_t deviceId,
         const RawEvent* rawEvents, size_t count) {
+	if(mEvRedirToID != NO_EV_REDIR_DEVICEID && mEvRedirFromID == deviceId) {
+		ALOGV(" ----- redirect %d->%d", mEvRedirFromID, mEvRedirToID);
+		deviceId = mEvRedirToID;
+	}
+
     ssize_t deviceIndex = mDevices.indexOfKey(deviceId);
     if (deviceIndex < 0) {
         ALOGW("Discarding event for unknown deviceId %d.", deviceId);
@@ -1332,6 +1355,35 @@ void CursorMotionAccumulator::finishSync() {
     clearRelativeAxes();
 }
 
+// --- CursorAbsoluteMotionAccumulator ---
+
+CursorAbsoluteMotionAccumulator::CursorAbsoluteMotionAccumulator() {
+	mAbsX = 0;
+	mAbsY = 0;
+}
+
+void CursorAbsoluteMotionAccumulator::reset(InputDevice* device) {
+	mAbsX = 0;
+	mAbsY = 0;
+}
+
+void CursorAbsoluteMotionAccumulator::process(const RawEvent* rawEvent) {
+	if (rawEvent->type == EV_ABS) {
+        switch (rawEvent->code) {    
+	    case ABS_X:
+            mAbsX = rawEvent->value;
+            break;
+        case ABS_Y:
+            mAbsY = rawEvent->value;
+            break;
+        }
+    }
+}
+
+void CursorAbsoluteMotionAccumulator::finishSync() {
+    mAbsX = 0;
+	mAbsY = 0;
+}
 
 // --- CursorScrollAccumulator ---
 
@@ -2413,8 +2465,9 @@ void KeyboardInputMapper::updateLedStateForModifier(LedState& ledState,
 
 // --- CursorInputMapper ---
 
-CursorInputMapper::CursorInputMapper(InputDevice* device) :
+CursorInputMapper::CursorInputMapper(InputDevice* device, bool absMouse) :
         InputMapper(device) {
+    mParameters.absMouse = absMouse;
 }
 
 CursorInputMapper::~CursorInputMapper() {
@@ -2518,6 +2571,13 @@ void CursorInputMapper::configure(nsecs_t when,
         }
         bumpGeneration();
     }
+
+    if (mPointerController != NULL) {
+		float minX, minY, maxX, maxY;
+		if(mPointerController->getBounds(&minX, &minY, &maxX, &maxY)) {
+			mCursorAbsoluteMotionAccumulator.setBounds(minX, minY, maxX, maxY);
+		}
+	}
 }
 
 void CursorInputMapper::configureParameters() {
@@ -2531,6 +2591,9 @@ void CursorInputMapper::configureParameters() {
         }
     }
 
+    getDevice()->getConfiguration().tryGetProperty(String8("cursor.absMouse"),
+            mParameters.absMouse);
+
     mParameters.orientationAware = false;
     getDevice()->getConfiguration().tryGetProperty(String8("cursor.orientationAware"),
             mParameters.orientationAware);
@@ -2572,6 +2635,7 @@ void CursorInputMapper::reset(nsecs_t when) {
     mCursorButtonAccumulator.reset(getDevice());
     mCursorMotionAccumulator.reset(getDevice());
     mCursorScrollAccumulator.reset(getDevice());
+    mCursorAbsoluteMotionAccumulator.reset(getDevice());
 
     InputMapper::reset(when);
 }
@@ -2580,6 +2644,7 @@ void CursorInputMapper::process(const RawEvent* rawEvent) {
     mCursorButtonAccumulator.process(rawEvent);
     mCursorMotionAccumulator.process(rawEvent);
     mCursorScrollAccumulator.process(rawEvent);
+    mCursorAbsoluteMotionAccumulator.process(rawEvent);
 
     if (rawEvent->type == EV_SYN && rawEvent->code == SYN_REPORT) {
         sync(rawEvent->when);
@@ -2611,6 +2676,14 @@ void CursorInputMapper::sync(nsecs_t when) {
     float deltaY = mCursorMotionAccumulator.getRelativeY() * mYScale;
     bool moved = deltaX != 0 || deltaY != 0;
 
+    if(mParameters.absMouse) {
+        float x, y;
+        mPointerController->getPosition(&x, &y);
+        deltaX = mCursorAbsoluteMotionAccumulator.getRelAbsX(x);
+        deltaY = mCursorAbsoluteMotionAccumulator.getRelAbsY(y);
+        moved = deltaX != 0 || deltaY != 0;
+        ALOGV(" ----- abs->rel x:%f y:%f dx:%f dy:%f xscal:%f yscal:%f", x, y, deltaX, deltaY, mXScale, mYScale);
+	}
     // Rotate delta according to orientation if needed.
     if (mParameters.orientationAware && mParameters.hasAssociatedDisplay
             && (deltaX != 0.0f || deltaY != 0.0f)) {
@@ -2633,7 +2706,9 @@ void CursorInputMapper::sync(nsecs_t when) {
     mWheelYVelocityControl.move(when, NULL, &vscroll);
     mWheelXVelocityControl.move(when, &hscroll, NULL);
 
-    mPointerVelocityControl.move(when, &deltaX, &deltaY);
+    if(!mParameters.absMouse) {
+	    mPointerVelocityControl.move(when, &deltaX, &deltaY);
+    }
 
     int32_t displayId;
     if (mPointerController != NULL) {
@@ -2672,7 +2747,7 @@ void CursorInputMapper::sync(nsecs_t when) {
     // the device in your pocket.
     // TODO: Use the input device configuration to control this behavior more finely.
     uint32_t policyFlags = 0;
-    if ((buttonsPressed || moved || scrolled) && getDevice()->isExternal()) {
+    if ((buttonsPressed || moved || scrolled) && (getDevice()->isExternal() || mParameters.absMouse)) {
         policyFlags |= POLICY_FLAG_WAKE;
     }
 
diff --git a/frameworks/native/services/inputflinger/InputReader.h b/frameworks/native/services/inputflinger/InputReader.h
index 6bf3818..86daa36 100644
--- a/frameworks/native/services/inputflinger/InputReader.h
+++ b/frameworks/native/services/inputflinger/InputReader.h
@@ -504,6 +504,12 @@ protected:
     friend class ContextImpl;
 
 private:
+	enum {
+		NO_EV_REDIR_DEVICEID = -1000,
+	};
+	int mEvRedirToID;	// deviceID of the VirtualBox mouse intergration device
+	int mEvRedirFromID;	// deviceID of PS/2 mouse
+
     Mutex mLock;
 
     Condition mReaderIsAliveCondition;
@@ -719,6 +725,36 @@ private:
     void clearRelativeAxes();
 };
 
+class CursorAbsoluteMotionAccumulator {
+public:
+    CursorAbsoluteMotionAccumulator();
+    void reset(InputDevice* device);
+
+    void process(const RawEvent* rawEvent);
+    void finishSync();
+
+    inline float getRelAbsX(float x) const {
+        float relX = mDeltaX * (float)mAbsX;
+        return relX/65535.0 - x; 
+    }
+    inline int32_t getRelAbsY(float y) const { 
+        float relY = mDeltaY * (float)mAbsY;
+        return relY/65535.0 - y; 
+    }
+
+    inline void setBounds(float minX, float minY, float maxX, float maxY) {
+        mDeltaX = maxX - minX;
+        mDeltaY = maxY - minY;
+    }
+private:
+    int32_t mAbsX;
+    int32_t mAbsY;
+
+    float mDeltaX;
+    float mDeltaY;
+
+};
+
 
 /* Keeps track of cursor scrolling motions. */
 
@@ -1178,7 +1214,7 @@ private:
 
 class CursorInputMapper : public InputMapper {
 public:
-    CursorInputMapper(InputDevice* device);
+    CursorInputMapper(InputDevice* device, bool absMouse = false);
     virtual ~CursorInputMapper();
 
     virtual uint32_t getSources();
@@ -1206,11 +1242,13 @@ private:
         Mode mode;
         bool hasAssociatedDisplay;
         bool orientationAware;
+        bool absMouse;
     } mParameters;
 
     CursorButtonAccumulator mCursorButtonAccumulator;
     CursorMotionAccumulator mCursorMotionAccumulator;
     CursorScrollAccumulator mCursorScrollAccumulator;
+    CursorAbsoluteMotionAccumulator mCursorAbsoluteMotionAccumulator;
 
     int32_t mSource;
     float mXScale;
